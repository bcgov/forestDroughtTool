monthly.asmr.future<-
sapply(names(asmr1$future),function(x) future.comp(asmr1$future[[x]]),USE.NAMES=TRUE,simplify=FALSE) %>%
bind_rows(.id=NULL)
View(monthly.asmr.future)
curr.asmr<-asmr1$current %>%
group_by(month) %>%
summarise_at(vars(ends_with(".ASMR")),mean) %>%
ungroup() %>%
rbind(c(13,colMeans(.)[-1])) %>%
mutate(month=cut(month,breaks=13,labels=c(month.abb,"Annual"))) %>%
mutate(Scenario="current") %>%
mutate(Period="normal") %>%
dplyr::select(Scenario,Period,everything())
asmrCompiled<-
sapply(names(asmr1$future),function(x) future.comp(asmr1$future[[x]]),USE.NAMES=TRUE,simplify=FALSE) %>%
bind_rows(.id=NULL) %>%
rbind(curr.asmr)
names(curr.asmr)
curr.asmr<-asmr1$current %>%
group_by(month) %>%
summarise_at(vars(ends_with(".ASMR")),mean) %>%
ungroup() %>%
rbind(c(13,colMeans(.)[-1])) %>%
mutate(month=cut(month,breaks=13,labels=c(month.abb,"Annual"))) %>%
mutate(Scenario="current") %>%
mutate(period="normal") %>%
dplyr::select(Scenario,Period,everything())
curr.asmr<-asmr1$current %>%
group_by(month) %>%
summarise_at(vars(ends_with(".ASMR")),mean) %>%
ungroup() %>%
rbind(c(13,colMeans(.)[-1])) %>%
mutate(month=cut(month,breaks=13,labels=c(month.abb,"Annual"))) %>%
mutate(Scenario="current") %>%
mutate(period="normal") %>%
dplyr::select(Scenario,period,everything())
asmrCompiled<-
sapply(names(asmr1$future),function(x) future.comp(asmr1$future[[x]]),USE.NAMES=TRUE,simplify=FALSE) %>%
bind_rows(.id=NULL) %>%
rbind(curr.asmr)
View(asmrCompiled)
View(asmrCompiled)
if(isTRUE(future)) {
asmrCompiled<-
sapply(names(asmr1$future),function(x) future.comp(asmr1$future[[x]]),USE.NAMES=TRUE,simplify=FALSE) %>%
bind_rows(.id=NULL) %>%
rbind(curr.asmr)
} else {asmrCompiled=curr.asmr}
asmrCompiled %>%
mutate_at(vars(ends_with(".ASMR")),asmrCut)
asmrCompiled %>%
mutate_at(vars(ends_with(".ASMR")),cut(x,breaks=c(0,asmrClass$asmrUL),labels=asmrClass$class))
asmrCompiled %>%
mutate_at(vars(ends_with(".ASMR")),cut(breaks=c(0,asmrClass$asmrUL),labels=asmrClass$class))
asmrCut<-function(x) cut(x,breaks=c(0,asmrClass$asmrUL),labels=asmrClass$class)
asmrCompiled %>%
mutate_at(vars(ends_with(".ASMR")),asmrCut)
asmrCompiled %>%
mutate_at(vars(ends_with(".ASMR")),asmrCut) %>%
mutate(bgc=bgc) %>%
dplyr::select(bgc,everything())
asmrCompiled%<>%
mutate(bgc=bgc) %>%
dplyr::select(bgc,everything())
asmrCompiled%<>%
mutate(bgc=bgc) %>%
dplyr::select(bgc,everything())
asmrCompiled %>%
mutate_at(vars(ends_with(".ASMR")),asmrCut)
asmrCompClass<-
asmrCompiled %>%
mutate_at(vars(ends_with(".ASMR")),asmrCut)
asmr1$years
asmr1$year
stnData
asmrSumm<-function(stnData,bgc, soils=soilsData,future=TRUE,years="random",lat=55){
# Run asmr
asmr1<-asmrRun(stnData,soils,future,bgc,years,lat)
# STEP 1: CURRENT DATA
# Summarise monthly data
# Include an annual row at the bottom
curr.asmr<-asmr1$current %>%
group_by(month) %>%
summarise_at(vars(ends_with(".ASMR")),mean) %>%
ungroup() %>%
rbind(c(13,colMeans(.)[-1])) %>%
mutate(month=cut(month,breaks=13,labels=c(month.abb,"Annual"))) %>%
mutate(Scenario="current") %>%
mutate(period="normal") %>%
dplyr::select(Scenario,period,everything())
# STEP 2: FUTURE DATA
# Define function to compile future data
future.comp<-function(x) {
x %>%
group_by(Scenario, period, month) %>%
summarise_at(vars(ends_with(".ASMR")),mean) %>%
ungroup() %>%
rbind(data.frame(Scenario=x$Scenario[1],period=x$period[1],month=13,summarise_at(x,vars(ends_with(".ASMR")),mean))) %>%
mutate(month=cut(month,breaks=13,labels=c(month.abb,"Annual"))) %>%
return()
}
# Apply functions to future data
if(isTRUE(future)) {
asmrCompiled<-
sapply(names(asmr1$future),function(x) future.comp(asmr1$future[[x]]),USE.NAMES=TRUE,simplify=FALSE) %>%
bind_rows(.id=NULL) %>%
rbind(curr.asmr)
} else {asmrCompiled=curr.asmr}
# Add in BGC
asmrCompiled%<>%
mutate(bgc=bgc) %>%
dplyr::select(bgc,everything())
# Cut table into classes
# Define function
asmrCut<-function(x) cut(x,breaks=c(0,asmrClass$asmrUL),labels=asmrClass$class)
asmrCompClass<-
asmrCompiled %>%
mutate_at(vars(ends_with(".ASMR")),asmrCut)
return(asmr=asmrComp,class=asmrCompClass,year)
}
x<-asmrSumm(PrinceGeorge,bgc="SBSmk1")
asmrSumm<-function(stnData,bgc, soils=soilsData,future=TRUE,years="random",lat=55){
# Run asmr
asmr1<-asmrRun(stnData,soils,future,bgc,years,lat)
# STEP 1: CURRENT DATA
# Summarise monthly data
# Include an annual row at the bottom
curr.asmr<-asmr1$current %>%
group_by(month) %>%
summarise_at(vars(ends_with(".ASMR")),mean) %>%
ungroup() %>%
rbind(c(13,colMeans(.)[-1])) %>%
mutate(month=cut(month,breaks=13,labels=c(month.abb,"Annual"))) %>%
mutate(Scenario="current") %>%
mutate(period="normal") %>%
dplyr::select(Scenario,period,everything())
# STEP 2: FUTURE DATA
# Define function to compile future data
future.comp<-function(x) {
x %>%
group_by(Scenario, period, month) %>%
summarise_at(vars(ends_with(".ASMR")),mean) %>%
ungroup() %>%
rbind(data.frame(Scenario=x$Scenario[1],period=x$period[1],month=13,summarise_at(x,vars(ends_with(".ASMR")),mean))) %>%
mutate(month=cut(month,breaks=13,labels=c(month.abb,"Annual"))) %>%
return()
}
# Apply functions to future data
if(isTRUE(future)) {
asmrCompiled<-
sapply(names(asmr1$future),function(x) future.comp(asmr1$future[[x]]),USE.NAMES=TRUE,simplify=FALSE) %>%
bind_rows(.id=NULL) %>%
rbind(curr.asmr)
} else {asmrCompiled=curr.asmr}
# Add in BGC
asmrCompiled%<>%
mutate(bgc=bgc) %>%
dplyr::select(bgc,everything())
# Cut table into classes
# Define function
asmrCut<-function(x) cut(x,breaks=c(0,asmrClass$asmrUL),labels=asmrClass$class)
asmrCompClass<-
asmrCompiled %>%
mutate_at(vars(ends_with(".ASMR")),asmrCut)
return(list(asmr=asmrComp,class=asmrCompClass,year))
}
asmrSumm(PrinceGeorge,bgc="SBSmk1")
asmrSumm<-function(stnData,bgc, soils=soilsData,future=TRUE,years="random",lat=55){
# Run asmr
asmr1<-asmrRun(stnData,soils,future,bgc,years,lat)
# STEP 1: CURRENT DATA
# Summarise monthly data
# Include an annual row at the bottom
curr.asmr<-asmr1$current %>%
group_by(month) %>%
summarise_at(vars(ends_with(".ASMR")),mean) %>%
ungroup() %>%
rbind(c(13,colMeans(.)[-1])) %>%
mutate(month=cut(month,breaks=13,labels=c(month.abb,"Annual"))) %>%
mutate(Scenario="current") %>%
mutate(period="normal") %>%
dplyr::select(Scenario,period,everything())
# STEP 2: FUTURE DATA
# Define function to compile future data
future.comp<-function(x) {
x %>%
group_by(Scenario, period, month) %>%
summarise_at(vars(ends_with(".ASMR")),mean) %>%
ungroup() %>%
rbind(data.frame(Scenario=x$Scenario[1],period=x$period[1],month=13,summarise_at(x,vars(ends_with(".ASMR")),mean))) %>%
mutate(month=cut(month,breaks=13,labels=c(month.abb,"Annual"))) %>%
return()
}
# Apply functions to future data
if(isTRUE(future)) {
asmrCompiled<-
sapply(names(asmr1$future),function(x) future.comp(asmr1$future[[x]]),USE.NAMES=TRUE,simplify=FALSE) %>%
bind_rows(.id=NULL) %>%
rbind(curr.asmr)
} else {asmrCompiled=curr.asmr}
# Add in BGC
asmrCompiled%<>%
mutate(bgc=bgc) %>%
dplyr::select(bgc,everything())
# Cut table into classes
# Define function
asmrCut<-function(x) cut(x,breaks=c(0,asmrClass$asmrUL),labels=asmrClass$class)
asmrCompClass<-
asmrCompiled %>%
mutate_at(vars(ends_with(".ASMR")),asmrCut)
return(list(asmr=asmrCompiled,class=asmrCompClass,year))
}
x<-asmrSumm(PrinceGeorge,bgc="SBSmk1")
str(asmr1,1)
asmrSumm<-function(stnData,bgc, soils=soilsData,future=TRUE,years="random",lat=55){
# Run asmr
asmr1<-asmrRun(stnData,soils,future,bgc,years,lat)
# STEP 1: CURRENT DATA
# Summarise monthly data
# Include an annual row at the bottom
curr.asmr<-asmr1$current %>%
group_by(month) %>%
summarise_at(vars(ends_with(".ASMR")),mean) %>%
ungroup() %>%
rbind(c(13,colMeans(.)[-1])) %>%
mutate(month=cut(month,breaks=13,labels=c(month.abb,"Annual"))) %>%
mutate(Scenario="current") %>%
mutate(period="normal") %>%
dplyr::select(Scenario,period,everything())
# STEP 2: FUTURE DATA
# Define function to compile future data
future.comp<-function(x) {
x %>%
group_by(Scenario, period, month) %>%
summarise_at(vars(ends_with(".ASMR")),mean) %>%
ungroup() %>%
rbind(data.frame(Scenario=x$Scenario[1],period=x$period[1],month=13,summarise_at(x,vars(ends_with(".ASMR")),mean))) %>%
mutate(month=cut(month,breaks=13,labels=c(month.abb,"Annual"))) %>%
return()
}
# Apply functions to future data
if(isTRUE(future)) {
asmrCompiled<-
sapply(names(asmr1$future),function(x) future.comp(asmr1$future[[x]]),USE.NAMES=TRUE,simplify=FALSE) %>%
bind_rows(.id=NULL) %>%
rbind(curr.asmr)
} else {asmrCompiled=curr.asmr}
# Add in BGC
asmrCompiled%<>%
mutate(bgc=bgc) %>%
dplyr::select(bgc,everything())
# Cut table into classes
# Define function
asmrCut<-function(x) cut(x,breaks=c(0,asmrClass$asmrUL),labels=asmrClass$class)
asmrCompClass<-
asmrCompiled %>%
mutate_at(vars(ends_with(".ASMR")),asmrCut)
return(list(asmr=asmrCompiled,class=asmrCompClass,asmr1$year))
}
x<-asmrSumm(PrinceGeorge,bgc="SBSmk1")
x
document()
library(forestDroughtTool)
help(package="forestDroughtTool")
asmrRun
help(package="forestDroughtTool")
warnings()
document()
document()
document()
asmrRun=function(stnData,soils=soilsData,future=TRUE,bgc, years="random",lat=55) {
# STEP 1: select years for analysis
# If user specifies that years should be selected at random:
if (years=="random") {
clim<-stnData[stnData$year%in%yearSelect(stnData),]
} else {
# else use the years vector they provide
clim<-stnData[stnData$year%in%years,]
}
# STEP 2: run asmrCalc() for current period
asmrCurrent=asmrCalc(clim,soils,latitude=lat)
# STEP 3 if future is true, calculate asmr for future periods/scenarios
if(isTRUE(future)) {
futureClim<-asmrFuture(clim,bgc)
asmrFut<-lapply(names(futureClim),function(x) asmrCalc(futureClim[[x]],soils,latitude=lat))
names(asmrFut)<-names(futureClim)
} else {
asmrFut=NULL
}
# FINAL OUTPUT
return(list(current=asmrCurrent,future=asmrFut,year=unique(clim$year)))
}
yearList=c(1985,1990:2001)
yearList
asmrRun(PrinceGeorge,bgc="SBSmk1",years=yearList)
library(forestDroughtTool)
asmrRun(PrinceGeorge,bgc="SBSmk1",years=yearList)
years=yearList
years
if (years=="random") {
clim<-stnData[stnData$year%in%yearSelect(stnData),]
} else {
# else use the years vector they provide
clim<-stnData[stnData$year%in%years,]
}
stnData=PrinceGeorge
bgc="SBSmk1"
if (years=="random") {
clim<-stnData[stnData$year%in%yearSelect(stnData),]
} else {
# else use the years vector they provide
clim<-stnData[stnData$year%in%years,]
}
unique(clim$year)
yearList
document()
library(devtools)
document()
document()
remotes::install_github("bcgov/forestDroughtTool")
rm(list=ls())
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(usethis)
usethis::use_course("https://github.com/bcgov/bcgov-r-geo-workshop/tree/master/data/20191106_Day_2_PM_Raster/data1.zip")
zip.file <- "../data/20191106_Day_2_PM_Raster/raster_basics.zip"
data.dir <-"../data/20191106_Day_2_PM_Raster/raster_basics"
unzip(zipfile = zip.file,
exdir=data.dir)
# see what goodies are in the folder
file = list.files(data.dir, "DEM.tif", recursive = T, full.names = T)
file
dem <- raster(file)
# dimension
dim(dem)
#resolution
res(dem)
# extent
extent(dem)
summary(dem, maxsamp = ncell(dem)) # forces to check all raster
cellStats(dem, sd)
minValue(dem)
maxValue(dem)
head(dem)           # not very useful
values(dem)         # a little more useful
unique(values(dem)) # much more useful
plot(dem)
dem <- setMinMax(dem)
NAvalue(dem) = -9999
dem
crs(dem)
# we can check the information on our ESPG:3005
CRS("+init=epsg:3005")
projection(dem)  # gives us the string version proj4string
crs(dem)
wgs84 <- "+init=epsg:4326"
dem.wgs84 = projectRaster(dem, crs = wgs84)
plot(dem)
plot(dem.wgs84)
nrow(dem)
nrow(dem.wgs84)
extent(dem)
extent(dem.wgs84)
res(dem)
res(dem.wgs84)
plot(dem)
library(mapview)
mapview(dem)
# Option 3: more fancy exploring
library(rasterVis)
install.package("rastervis")
install.package("rasterVis")
install.packages("rasterVis")
library(rasterVis)
plot3D(dem)
library(ggplot2)
dem_df <- as.data.frame(dem, xy = TRUE)
str(dem_df)
ggplot() +
geom_raster(data = dem_df , aes(x = x, y = y, fill = DEM)) +
scale_fill_viridis_c() +
coord_quickmap()
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(usethis)
# set up the data location --------------------------------------
## still need to fix this
#usethis::use_course("https://github.com/bcgov/bcgov-r-geo-workshop/tree/master/data/20191106_Day_2_PM_Raster/data1.zip")
zip.file <- "../data/20191106_Day_2_PM_Raster/raster_basics.zip"
data.dir <-"../data/20191106_Day_2_PM_Raster/raster_basics"
unzip(zipfile = zip.file,
exdir=data.dir)
# see what goodies are in the folder
file = list.files(data.dir, "DEM.tif", recursive = T, full.names = T)
# read in a single raster
dem <- raster(file)
plot(dem)
dem <- setMinMax(dem)
NAvalue(dem) = -9999
dem
crs(dem)
# we can check the information on our ESPG:3005
CRS("+init=epsg:3005")
projection(dem)  # gives us the string version proj4string
plot(dem)
library(mapview)
mapview(dem)
library(rasterVis)
plot3D(dem)
library(ggplot2)
dem_df <- as.data.frame(dem, xy = TRUE)
str(dem_df)
ggplot() +
geom_raster(data = dem_df , aes(x = x, y = y, fill = DEM)) +
scale_fill_viridis_c() +
coord_quickmap()
knitr::opts_chunk$set(echo = TRUE)
library(raster)
library(usethis)
# set up the data location --------------------------------------
## still need to fix this
#usethis::use_course("https://github.com/bcgov/bcgov-r-geo-workshop/tree/master/data/20191106_Day_2_PM_Raster/data1.zip")
zip.file <- "../data/20191106_Day_2_PM_Raster/raster_basics.zip"
data.dir <-"../data/20191106_Day_2_PM_Raster/raster_basics"
unzip(zipfile = zip.file,
exdir=data.dir)
# see what goodies are in the folder
file = list.files(data.dir, "DEM.tif", recursive = T, full.names = T)
# read in a single raster
dem <- raster(file)
plot(dem)
dem <- setMinMax(dem)
NAvalue(dem) = -9999
dem
crs(dem)
# we can check the information on our ESPG:3005
CRS("+init=epsg:3005")
projection(dem)  # gives us the string version proj4string
# reclasss a raster to above or below 1000
rcl <- matrix(c(0, 1000, 1, 1000.0001, 1600, 2), ncol = 3, byrow = TRUE)
rcl
recl.dem <- reclassify(dem, rcl = rcl)
plot(recl.dem)
# reclassify into 4 groups.
dem.class <- reclassify (dem, c(-Inf, 800, 1,
700, 1000, 2,
1000, 1250, 3,
1250, Inf, 4))
plot(dem.class)
# create the terrain layers from a dem based on neighbourhood
slope <- terrain(dem, opt='slope', unit='radians',  neighbors=8)
plot(slope)
aspect <- terrain(dem, opt='aspect', unit='radians',  neighbors=8)
plot(aspect)
#Create a hill shade
hs <- hillShade(slope, aspect, angle=30, direction=270)
plot(hs, col=gray.colors(20))
hs_df <- as.data.frame(hs, xy = TRUE)
dem_df <- as.data.frame(dem, xy = TRUE)
ggplot() +
geom_raster(data = dem_df ,
aes(x = x, y = y,
fill = DEM)) +
geom_raster(data = hs_df,
aes(x = x, y = y, alpha = layer)) +
scale_fill_gradientn(colours = terrain.colors(10)) +
scale_alpha(range = c(0.15, 0.65), guide = "none") +
ggtitle("Elevation with hillshade") +
coord_quickmap()
plot(dem.class)
dem.zone <- zonal(dem, dem.class, fun= "mean")
dem.zone
knitr::opts_chunk$set(echo = TRUE)
library(raster)
data.dir <- "C:/Training/R_intermediate/data" #change to common location
data.dir <- "TO BE FILLED IN "
unzip("data/20191106_Day_2_PM_Raster/raster_basics.zip", exdir = file.path(data.dir,"raster_basics"))
rm(list=ls())
library(forestDroughtTool)
asmrNorth
?asmrNorth
library(readr)
treeRiskRatings <- read_csv("data-raw/treeRiskRatings.csv")
View(treeRiskRatings)
treeRiskRatings <- readr::read_csv("data-raw/treeRiskRatings.csv")
treeRisk <- readr::read_csv("data-raw/treeRiskRatings.csv")
save(treeRisk,file="../data/treeRisk.rda")
getwd()
save(treeRisk,file="./data/treeRisk.rda")
library(devtools)
document()
rm(list=ls())
# Load data
load("C:/Users/hgriesba/Documents/Projects/Drought/Stand Level Tool/TACA/ASMR tool/R markdown 2019/DailyTimeSeries/Analyze_Daily_Soil_MoistureASMR/smithersASMR.RData")
load("C:/Users/hgriesba/Documents/Projects/Drought/Stand Level Tool/TACA/ASMR tool/R markdown 2019/DailyTimeSeries/Analyze_Daily_Soil_MoistureASMR/Smithers_soilM.RData")
a1 = c(1, 2, 3, 4, 5)
a2 = c(6, 7, 8, 9, 10)
a3 = c(11, 12, 13, 14, 15)
aframe = data.frame(a1, a2, a3)
aframe
avector <- as.vector(aframe['a2'])
class(avector)
avector <- aframe[['a2']]
class(avector)
avector <- aframe[,2]
class(avector)
avector
SOILS
soils
library(forestDroughtTool)
soilsData
